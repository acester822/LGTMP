/*
Module Components: integrations_cadvisor
*/

declare "integrations_cadvisor" {

	/*****************************************************************
	* ARGUMENTS
	*****************************************************************/
	argument "forward_to" {
		comment = "Must be a list(MetricssReceiver) where collected metrics should be forwarded to"
	}

	argument "cluster" {
		optional = true
		default  = "docker-compose"
	}

	argument "namespace" {
		optional = true
		default  = "monitoring-system"
	}

	argument "keep_metrics" {
		optional = true
		default  = "(up|container_cpu_usage_seconds_total|container_fs_inodes_free|container_fs_inodes_total|container_fs_limit_bytes|container_fs_usage_bytes|container_last_seen|container_memory_usage_bytes|container_network_receive_bytes_total|container_network_tcp_usage_total|container_network_transmit_bytes_total|container_spec_memory_reservation_limit_bytes|machine_memory_bytes|machine_scrape_error|container_start_time_seconds|container_fs_writes_bytes_total|container_fs_reads_bytes_total|container_memory_rss)"
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 30s)"
		optional = true
		default  = "30s"
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
		default  = "10s"
	}

	/***************************************************************
	* Integrations cAdvisor
	****************************************************************/
	prometheus.exporter.cadvisor "integrations_cadvisor" {
		docker_host = "unix:///var/run/docker.sock"

		store_container_labels = false
		// store_container_labels must be set to false for this to take effect.
		// https://github.com/google/cadvisor/blob/master/docs/runtime_options.md#cadvisor-runtime-options
		allowlisted_container_labels = [
			"com.docker.compose.project",
			"com.docker.compose.service",
			"metrics.grafana.com/job",
			"prometheus.io/job",
		]

		// only show stats for docker containers
		docker_only     = true
		enabled_metrics = ["app", "cpu", "disk", "diskIO", "memory", "network", "process"]
	}

	/***************************************************************
	* Discovery Relabelings (pre-scrape)
	****************************************************************/
	discovery.relabel "integrations_cadvisor" {
		targets = prometheus.exporter.cadvisor.integrations_cadvisor.targets

		// set the cluster label
		rule {
			target_label = "cluster"
			replacement  = argument.cluster.value
		}

		// set the namespace label
		rule {
			target_label = "namespace"
			replacement  = argument.namespace.value
		}
	}

	/***************************************************************
	* Prometheus Scrape Integrations Targets
	****************************************************************/
	prometheus.scrape "integrations_cadvisor" {
		targets = concat(
			discovery.relabel.integrations_cadvisor.output,
		)

		enable_protobuf_negotiation = true
		scrape_classic_histograms   = true

		scrape_interval = argument.scrape_interval.value
		scrape_timeout  = argument.scrape_timeout.value

		clustering {
			enabled = true
		}

		forward_to = [prometheus.relabel.integrations_cadvisor.receiver]
	}

	/***************************************************************
	* Prometheus Metric Relabelings (post-scrape)
	****************************************************************/
	prometheus.relabel "integrations_cadvisor" {
		forward_to = argument.forward_to.value

		// drop unused metric label
		rule {
			action = "labeldrop"
			regex  = "id"
		}

		// keep only metrics that match the keep_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = argument.keep_metrics.value
			action        = "keep"
		}

		// set a default job label to be the namespace/service_name
		rule {
			action        = "replace"
			source_labels = [
				"container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = argument.namespace.value + "/$1"
			target_label = "job"
		}

		rule {
			action        = "replace"
			source_labels = [
				"container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "pod"
		}

		rule {
			action        = "replace"
			source_labels = [
				"container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "container"
		}

		// allow resources to declare their the job label value to use when collecting their metrics, the default value is "",
		rule {
			action        = "replace"
			source_labels = [
				"container_label_metrics_agent_grafana_com_job",
				"container_label_prometheus_io_job",
			]
			separator    = ";"
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "job"
		}
	}
}
