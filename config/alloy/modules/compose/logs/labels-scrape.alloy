/*
Module Components: labels_scrape
Description: Scrapes targets for logs based on Docker Containers labels

Following labels are available:
  logs.grafana.com/scrape: true

 allow containers to declare what tenant their logs should be written to,
 the following label is supported:

   logs.grafana.com/tenant: "primary"
*/

declare "labels_scrape" {

	/*****************************************************************
	* ARGUMENTS
	*****************************************************************/
	argument "forward_to" {
		comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
	}

	argument "label_prefix" {
		comment  = "The label_prefix to use Auto-Scraping (default: logs.grafana.com)"
		default  = "logs.grafana.com"
		optional = true
	}

	/*
    Hidden Arguments
    These arguments are used to set reusable variables to avoid repeating logic
  */
	argument "__sd_label" {
		optional = true
		comment  = "The logic is used to transform the label_prefix argument into a valid label name by removing unsupported characters."
		default  = replace(replace(replace(coalesce(argument.label_prefix.value, "logs.grafana.com"), ".", "_"), "/", "_"), "-", "_")
	}

	argument "cluster" {
		optional = true
		default  = "docker-compose"
	}

	argument "namespace" {
		optional = true
		default  = "monitoring-system"
	}

	argument "tenant" {
		comment  = "The tenant to write logs to.  This does not have to be the tenantId, this is the value to look for in the logs.grafana.com/tenant label, and this can be a regex. (default: (.*))"
		optional = true
		default  = "(.*)"
	}

	/*****************************************************************
	* Targets From Docker Discovery
	*****************************************************************/
	discovery.docker "dd_logs" {
		host             = "unix:///var/run/docker.sock"
		refresh_interval = "60s"

		filter {
			name   = "status"
			values = ["running"]
		}
	}

	// get logs from discovery relabel dr_docker_logs below
	loki.source.docker "lsd_docker_logs" {
		forward_to = argument.forward_to.value

		host          = "unix:///var/run/docker.sock"
		targets       = discovery.relabel.dr_docker_logs.output
		relabel_rules = discovery.relabel.dr_docker_logs.rules
	}

	discovery.relabel "dr_docker_logs" {
		targets = discovery.docker.dd_logs.targets

		/****************************************************************************************************************
		* Handle Discovers From Docker Engine Containers Targets to Keep or Drop
		* https://grafana.com/docs/agent/latest/flow/reference/components/discovery.docker/#exported-fields
		****************************************************************************************************************/
		// allow resources to declare their metrics scraped or not
		// Example Annotation:
		//   logs.grafana.com/scrape: false
		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_scrape",
			]
			separator    = ";"
			regex        = "^(?:;*)?(true|false).*$"
			replacement  = "$1"
			target_label = "__tmp_scrape"
		}

		// drop any targets that have scrape: false
		rule {
			action        = "drop"
			source_labels = ["__tmp_scrape"]
			regex         = "false"
		}

		// allow resources to declare their metrics the tenant their metrics should be sent to,
		// Example Annotation:
		//   logs.grafana.com/tenant: primary
		rule {
			action        = "keep"
			source_labels = [
				"__meta_docker_container_label_" + argument.__sd_label.value + "_tenant",
			]
			regex = "^(" + argument.tenant.value + ")$"
		}

		// make all labels on the pod available to the pipeline as labels(for loki process),
		// they are omitted before write via label allow unless explicitly set
		rule {
			action = "labelmap"
			regex  = "__meta_docker_container_label_(.+)"
		}

		/********************************************
		* Handle Setting Common Labels
		********************************************/

		// set the cluster label
		rule {
			action       = "replace"
			replacement  = argument.cluster.value
			target_label = "cluster"
		}

		// set the namespace label
		rule {
			action       = "replace"
			replacement  = argument.namespace.value
			target_label = "namespace"
		}

		// set a default job label to be the namespace/service_name
		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = argument.namespace.value + "/$1"
			target_label = "job"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "pod"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "container"
		}

		rule {
			source_labels = ["__meta_docker_container_name"]
			regex         = "/(.*)"
			target_label  = "container_name"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_com_docker_compose_service",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "app"
		}

		rule {
			action        = "replace"
			source_labels = [
				"__meta_docker_container_label_app",
			]
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "app"
		}
	}
}
