
x-labels: &profiles-labels
  profiles.grafana.com/cpu.scrape: true
  profiles.grafana.com/memory.scrape: true
  profiles.grafana.com/goroutine.scrape: true

x-environment: &jaeger-environment
  JAEGER_AGENT_HOST: alloy
  JAEGER_AGENT_PORT: 6831
  JAEGER_SAMPLER_TYPE: const
  JAEGER_SAMPLER_PARAM: 1

 #x-network: &oncall-network
  #SEND_ANONYMOUS_USAGE_STATS: ${SEND_ANONYMOUS_USAGE_STATS:-false}
  #DATABASE_TYPE: sqlite3
  #BROKER_TYPE: redis
  #BASE_URL: ${BASE_URL:-http://engine:8080}
  #SECRET_KEY: ${SECRET_KEY:-r4KriYc9sL6PJLaGdDRQL3PKqT6bufTx2uhj}
  #FEATURE_PROMETHEUS_EXPORTER_ENABLED: ${FEATURE_PROMETHEUS_EXPORTER_ENABLED:-true}
  #REDIS_URI: redis://redis:6379/0
  #DJANGO_SETTINGS_MODULE: settings.hobby
  #CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
  #CELERY_WORKER_CONCURRENCY: "1"
  #CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
  #CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
  #CELERY_WORKER_BEAT_ENABLED: "True"
  #GRAFANA_API_URL: ${GRAFANA_API_URL:-http://grafana:3000}
  #EMAIL_HOST: inbucket
  #EMAIL_PORT: 2500
  #EMAIL_FROM_ADDRESS: oncall@grafana.localhost
  #EMAIL_USE_TLS: false
  #FEATURE_TELEGRAM_INTEGRATION_ENABLED: ${FEATURE_TELEGRAM_INTEGRATION_ENABLED:-false}
  #FEATURE_SLACK_INTEGRATION_ENABLED: ${FEATURE_SLACK_INTEGRATION_ENABLED:-false}
  #SLACK_CLIENT_OAUTH_ID: ${SLACK_CLIENT_OAUTH_ID:-}
  #SLACK_CLIENT_OAUTH_SECRET: ${SLACK_CLIENT_OAUTH_SECRET:-}
  #SLACK_INSTALL_RETURN_REDIRECT_HOST: ${SLACK_INSTALL_RETURN_REDIRECT_HOST:-}
  #SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET:-}
  #GRAFANA_CLOUD_NOTIFICATIONS_ENABLED: ${GRAFANA_CLOUD_NOTIFICATIONS_ENABLED:-false}
  #GRAFANA_CLOUD_ONCALL_HEARTBEAT_ENABLED: ${GRAFANA_CLOUD_ONCALL_HEARTBEAT_ENABLED:-false}
  #GRAFANA_CLOUD_ONCALL_TOKEN: ${GRAFANA_CLOUD_ONCALL_TOKEN:-}

x-healthcheck: &status-healthcheck
  interval: 3s
  timeout: 1s
  retries: 15

configs:
  alloy_config_file:
    file: ./config/alloy/master.alloy
  loki_config_file:
    file: ./config/loki/loki.yaml
  tempo_config_file:
    file: ./config/tempo/tempo.yaml
  mimir_config_file:
    file: ./config/mimir/mimir.yaml
  pyroscope_config_file:
    file: ./config/pyroscope/pyro.yaml

services:

  alloy:
    labels:
      logs.grafana.com/log-format: logfmt
    depends_on: { gateway: { condition: service_healthy } }
    image: ${ALLOY_IMAGE:-docker.io/grafana/alloy:v1.0.0}
    configs:
      - source: alloy_config_file
        target: /etc/alloy/config.alloy
    volumes:
      - ./config/alloy/modules:/etc/alloy/modules
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /etc/passwd:/etc/passwd:ro
      - /etc/group:/etc/group:ro
      - /etc/localtime:/etc/localtime:ro
      - /proc:/proc
      - /etc/os-release:/etc/os-release:ro
      - /var/log:/var/log:ro
      - /run/dbus:/run/dbus:ro
      - /run/udev/data:/run/udev/data:ro
      - /dev/kmsg:/dev/kmsg:ro
    entrypoint:
      - /bin/alloy
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
      - --cluster.enabled=true
      - --cluster.join-addresses=alloy-cluster:12345
      - --disable-reporting=true
      - --stability.level=experimental
      - --storage.path=/var/lib/alloy/data
    environment:
      - ALLOY_MODULES_FOLDER=/etc/alloy/modules
      - ALLOY_LOG_LEVEL=warn
    ports:
      - "12345:12345"
      # - "12345-12348:12345" # Note: max replicas num is 3.
    deploy:
      replicas: 1
    networks:
      default:
        aliases:
          - alloy-cluster

  gateway:
    labels:
      metrics.grafana.com/scrape: false
    depends_on: { loki: { condition: service_healthy }, tempo: { condition: service_healthy }, mimir: { condition: service_healthy }, pyroscope: { condition: service_healthy } }
    image: ${NGINX_IMAGE:-docker.io/nginxinc/nginx-unprivileged:1.25-alpine}
    restart: always
    volumes:
      - ./config/nginx/10-default-lgtmp.envsh:/docker-entrypoint.d/10-default-lgtmp.envsh
      - ./config/nginx/nginx.conf:/etc/nginx/templates/nginx.conf.template
      - ./config/loki/gateway_loki.conf:/etc/nginx/templates/gateway_loki.conf.template
      - ./config/tempo/gateway_tempo.conf:/etc/nginx/templates/gateway_tempo.conf.template
      - ./config/mimir/gateway_mimir.conf:/etc/nginx/templates/gateway_mimir.conf.template
      - ./config/pyroscope/gateway_pyroscope.conf:/etc/nginx/templates/gateway_pyroscope.conf.template
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ || exit 1" ]
      interval: 3s
      timeout: 1s
      retries: 20

  loki:
    labels:
      <<: *profiles-labels
      metrics.grafana.com/scrape: true
      metrics.grafana.com/job: "monitoring-system/loki-single-binary"
      logs.grafana.com/job: "monitoring-system/loki-single-binary"
      profiles.grafana.com/service_name: loki
      logs.grafana.com/log-format: logfmt
    depends_on: { minio: { condition: service_healthy } }
    image: ${LOKI_IMAGE:-docker.io/grafana/loki:3.0.0}
    configs:
      - source: loki_config_file
        target: /etc/loki/config.yaml
    volumes:
      - ./config/loki:/etc/loki/configs
    command:
      - -config.file=/etc/loki/config.yaml
      - -target=all
      - -config.expand-env=true
    environment:
      <<: *jaeger-environment
      JAEGER_TAGS: app=loki
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      <<: *status-healthcheck
    # expose 33100 port so we can directly access loki inside container
    ports:
      - "33100:3100"
    networks:
      default:
        aliases:
          - loki-memberlist

  tempo:
    labels:
      <<: *profiles-labels
      metrics.grafana.com/scrape: true
      profiles.grafana.com/service_name: tempo
    depends_on: { minio: { condition: service_healthy }, mimir: { condition: service_healthy } }
    image: ${TEMPO_IMAGE:-docker.io/grafana/tempo:2.4.1}
    configs:
      - source: tempo_config_file
        target: /etc/tempo/config.yaml
    volumes:
      - ./config/tempo:/etc/tempo/configs
    command:
      - -config.file=/etc/tempo/config.yaml
      - -target=all
      - -config.expand-env=true
    environment:
      <<: *jaeger-environment
      JAEGER_TAGS: app=tempo
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3200/ready || exit 1" ]
      <<: *status-healthcheck
      start_period: 10s
    # expose 33200 port so we can directly access tempo inside container
    ports:
      - "33200:3200"

  mimir:
    labels:
      <<: *profiles-labels
      metrics.grafana.com/scrape: true
      profiles.grafana.com/service_name: mimir
    depends_on: { minio: { condition: service_healthy } }
    image: ${MIMIR_IMAGE:-docker.io/grafana/mimir:2.12.0}
    configs:
      - source: mimir_config_file
        target: /etc/mimir/config.yaml
    volumes:
      - ./config/mimir:/etc/mimir/configs
    command:
      - -config.file=/etc/mimir/config.yaml
      - -target=all
      - -config.expand-env=true
      - -ruler.max-rules-per-rule-group=50
    environment:
      <<: *jaeger-environment
      JAEGER_TAGS: app=mimir
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ready || exit 1" ]
      <<: *status-healthcheck
    # expose 38080 port so we can directly access mimir inside container
    ports:
      - "38080:8080"
    networks:
      default:
        aliases:
          - mimir-memberlist

  pyroscope:
    labels:
      metrics.grafana.com/scrape: true
      profiles.grafana.com/service_name: pyroscope
    depends_on: { minio: { condition: service_healthy } }
    image: ${PYROSCOPE_IMAGE:-docker.io/grafana/pyroscope:1.5.0}
    configs:
      - source: pyroscope_config_file
        target: /etc/pyroscope/config.yaml
    volumes:
      - ./config/pyroscope:/etc/pyroscope/configs
      - pyroscope_data:/data
    command:
      - -config.file=/etc/pyroscope/config.yaml
      - -config.expand-env=true
    environment:
      <<: *jaeger-environment
      JAEGER_TAGS: app=pyroscope
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:4040/ready || exit 1" ]
      <<: *status-healthcheck
    # expose 34040 port so we can directly access pyroscope inside container
    ports:
      - "34040:4040"

  minio:
    # https://github.com/qclaogui/codelab-monitoring/blob/main/alloy-modules/compose/README.md
    labels:
      logs.grafana.com/scrape: false
      metrics.grafana.com/scrape: true
      metrics.grafana.com/job: minio-job
      metrics.grafana.com/path: /minio/v2/metrics/cluster
      metrics.grafana.com/port: 9000
      metrics.grafana.com/interval: 15s
      metrics.grafana.com/timeout: 10s
    image: ${MINIO_IMAGE:-docker.io/minio/minio:RELEASE.2024-03-15T01-07-19Z}
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/mimir-blocks /data/mimir-ruler /data/mimir-alertmanager && \
        mkdir -p /data/loki-data /data/loki-ruler && \
        mkdir -p /data/tempo-data  && \
        mkdir -p /data/pyroscope-data && \
        minio server /data --console-address ':9001'
    environment:
      - MINIO_ROOT_USER=lgtmp
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
      # # https://github.com/minio/console/issues/3237#issuecomment-1947485286
      # - MINIO_PROMETHEUS_URL="http://gateway:8080/prometheus"
      # - MINIO_PROMETHEUS_JOB_ID="minio-job"
    volumes:
      - minio_data:/data:delegated
    healthcheck:
      test: ["CMD-SHELL", "mc ready local"]
      interval: 2s
      timeout: 1s
      retries: 15
    ports:
      - "9001:9001"

  inbucket:
    labels:
      metrics.grafana.com/scrape: false
    image: ${INBUCKET_IMAGE:-inbucket/inbucket:3.0.4}
    ports:
      - 2500 # SMTP
      - "39000:9000" # HTTP
      - 1100 # POP3
    volumes:
      - inbucket_data:/storage
      - inbucket_data:/config

  grafana:
    labels:
      metrics.grafana.com/scrape: false
    image: ${GRAFANA_IMAGE:-docker.io/grafana/grafana:11.0.0-preview}
    command:
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ./config/grafana/grafana.ini:/etc/grafana-config/grafana.ini
      - dashboards_data:/var/lib/grafana/dashboards
      - ./config/grafana/provisioning:/etc/grafana/provisioning
       #- ./config/grafana/provisioning/datasources/redis.yaml:/etc/grafana/provisioning/datasources/redis.yaml
      - ./config/grafana/provisioning/plugins/grafana-lokiexplore-app.yaml:/etc/grafana/provisioning/plugins/grafana-lokiexplore-app.yaml
       #- ./config/grafana/provisioning/plugins/grafana-oncall-app.yaml:/etc/grafana/provisioning/plugins/grafana-oncall-app.yaml
       #- ./config/grafana/provisioning/plugins/redis-app.yaml:/etc/grafana/provisioning/plugins/redis-app.yaml
      - ./config/grafana/provisioning/dashboards/:/var/lib/grafana/dashboards/
    environment:
      GF_FEATURE_TOGGLES_ENABLE: traceqlEditor tracesEmbeddedFlameGraph traceqlSearch correlations metricsSummary traceToMetrics traceToProfiles
        # add to toggles for oncall > accessControlOnCall
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: grafana-lokiexplore-app
        # add to plugins for oncall > grafana-oncall-app
      GF_SMTP_ENABLED: true
      GF_SMTP_HOST: inbucket:2500
      GF_INSTALL_PLUGINS: https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app,
        #add to plugins if you want oncall > grafana-oncall-app v1.4.0, redis-app v2.2.1
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"

  mimirtool:
    # https://github.com/qclaogui/codelab-monitoring/blob/main/alloy-modules/compose/README.md
    labels:
      metrics.grafana.com/scrape: false
    image: ${MIMIRTOOL_IMAGE:-docker.io/grafana/mimirtool:2.12.0}
    volumes:
      - ./monitoring-mixins/alloy-mixin/deploy/alloy-mixin-alerts.yaml:/rules/alloy-mixin-alerts.yaml
      - ./monitoring-mixins/memcached-mixin/deploy/memcached-mixin-alerts.yaml:/rules/memcached-mixin-alerts.yaml
      - ./monitoring-mixins/github-mixin/deploy/github-mixin-rules.yaml:/rules/github-mixin-rules.yaml
      - ./monitoring-mixins/github-mixin/deploy/github-mixin-alerts.yaml:/rules/github-mixin-alerts.yaml
      - ./monitoring-mixins/mimir-mixin/deploy/mimir-mixin-rules.yaml:/rules/mimir-mixin-rules.yaml
      - ./monitoring-mixins/mimir-mixin/deploy/mimir-mixin-alerts.yaml:/rules/mimir-mixin-alerts.yaml
      - ./monitoring-mixins/loki-mixin/deploy/loki-mixin-rules.yaml:/rules/loki-mixin-rules.yaml
      - ./monitoring-mixins/loki-mixin/deploy/loki-mixin-alerts.yaml:/rules/loki-mixin-alerts.yaml
      - ./monitoring-mixins/pyroscope-mixin/deploy/pyroscope-mixin-rules.yaml:/rules/pyroscope-mixin-rules.yaml
      - ./monitoring-mixins/tempo-mixin/deploy/tempo-mixin-rules.yaml:/rules/tempo-mixin-rules.yaml
      - ./monitoring-mixins/tempo-mixin/deploy/tempo-mixin-alerts.yaml:/rules/tempo-mixin-alerts.yaml
    environment:
      - MIMIR_ADDRESS=http://gateway:8080
      - MIMIR_TENANT_ID=anonymous
    command: >-
      rules load /rules/github-mixin-alerts.yaml /rules/github-mixin-rules.yaml /rules/alloy-mixin-alerts.yaml /rules/mimir-mixin-rules.yaml /rules/mimir-mixin-alerts.yaml /rules/tempo-mixin-alerts.yaml /rules/tempo-mixin-rules.yaml /rules/loki-mixin-rules.yaml /rules/loki-mixin-alerts.yaml /rules/memcached-mixin-alerts.yaml /rules/pyroscope-mixin-rules.yaml

  memcached:
    labels:
      metrics.grafana.com/scrape: false
    image: ${MEMCACHED_IMAGE:-docker.io/memcached:1.6.24-alpine}

  memcached-exporter:
    labels:
      - logs.grafana.com/scrape=false
      - metrics.grafana.com/scrape=false
      - metrics.grafana.com/job=memcached
      - metrics.grafana.com/port=9150
      - metrics.grafana.com/interval=15s
    image: ${MEMCACHED_EXPORTER_IMAGE:-prom/memcached-exporter:v0.14.2}
    command:
      - --memcached.address=memcached:11211
      - --web.listen-address=0.0.0.0:9150

  opentelemetry-collector:
    container_name: opentelemetry-collector
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./config/otel/otel-config.yaml:/etc/otel-config.yaml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      #- /:/rootfs:ro
      #- /sys:/sys:ro
      #- /var/lib/docker:/var/lib/docker:ro
      #- /etc/passwd:/etc/passwd:ro
      #- /etc/group:/etc/group:ro
      #- /etc/localtime:/etc/localtime:ro
      #- /proc:/proc
      #- /etc/os-release:/etc/os-release:ro
      #- /var/log:/var/log:ro
      #- /run/dbus:/run/dbus:ro
      #- /run/udev/data:/run/udev/data:ro
      #- /dev/kmsg:/dev/kmsg:ro
    command:
      - "--config=/etc/otel-config.yaml"

volumes:
  pyroscope_data:
  minio_data:
  inbucket_data:
  dashboards_data:
