//*Location: LGTMP Stack
/*
Module Components: component_prom_imports
*/

declare "component_prom_imports" {

	/*****************************************************************
	* ARGUMENTS
	*****************************************************************/
	argument "forward_to" {
		comment = "Must be a list(MetricssReceiver) where collected metrics should be forwarded to"
	}

	argument "job_label" {
		optional = true
		default  = "integrations/windows_exporter"
	}

	argument "ip_source" {
		optional = true
		default  = "192.168.68.118:9184"
	}

	argument "instance_name" {
		optional = true
		default  = "kids_2"
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 15s)"
		optional = true
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
	}

	/***************************************************************
	* Prometheus Scrape Integrations Targets
	****************************************************************/
 
    prometheus.scrape "integrations_prom_imports" {
	    targets = [{
            __address__ = argument.ip_source.value,
        }]

		scrape_interval = argument.scrape_interval.value
		scrape_timeout  = argument.scrape_timeout.value

		forward_to = [prometheus.relabel.integrations_prom_imports.receiver]
	}

	/***************************************************************
	* Prometheus Metric Relabelings (post-scrape)
	****************************************************************/
	prometheus.relabel "integrations_prom_imports" {
		forward_to = argument.forward_to.value

		rule {
			target_label = "job"
			replacement  = argument.job_label.value
		}

		rule {
			target_label = "instance"
			replacement  = coalesce(argument.instance_name.value, constants.hostname)
		}

		// keep only metrics that match the keep_metrics regex
		//rule {
		//	source_labels = ["__name__"]
		//	regex         = argument.keep_metrics.value
		//	action        = "keep"
		//}

		// Drop metrics for certain file systems
		//rule {
		//	source_labels = ["__name__", "fstype"]
		//	separator     = "@"
		//	regex         = "node_filesystem.*@(tempfs)"
		//	action        = "drop"
		//}
	}
}
